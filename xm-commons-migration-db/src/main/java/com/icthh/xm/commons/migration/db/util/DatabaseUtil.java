package com.icthh.xm.commons.migration.db.util;

import static com.icthh.xm.commons.tenant.TenantContextUtils.assertTenantKeyValid;

import com.icthh.xm.commons.migration.db.Constants;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import javax.sql.DataSource;

import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;

/**
 * Utility for database operations.
 */
@Slf4j
@UtilityClass
@SuppressWarnings("squid:S1118") // private constructor generated by lombok
public final class DatabaseUtil {

    /**
     * Creates new database scheme.
     *
     * @param dataSource the datasource
     * @param name       schema name
     */
    public static void createSchema(DataSource dataSource, String name) {
        assertTenantKeyValid(name);
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            statement.executeUpdate(String.format(Constants.DDL_CREATE_SCHEMA, name));
        } catch (SQLException e) {
            throw new RuntimeException("Can not connect to database", e);
        }
    }

    /**
     * Execute sql query with auto commit
     *
     * @param dataSource the datasource
     * @param sql        the sql query
     * @throws SQLException when execution is failed
     */
    public static void executeUpdateWithAutoCommit(final DataSource dataSource, final String sql) throws SQLException {
        Connection connection = null;
        boolean autocommitBefore = false;
        Statement statement = null;
        try {
            connection = dataSource.getConnection();
            autocommitBefore = connection.getAutoCommit();
            statement = connection.createStatement();
            connection.setAutoCommit(true);
            log.info("execute sql: [{}], autocommit = {}", sql, connection.getAutoCommit());
            int res = statement.executeUpdate(sql);
            log.debug("result = {}", res);
        } finally {
            if (statement != null && !statement.isClosed()) {
                log.debug("close statement!");
                statement.close();
            }
            if (connection != null) {
                connection.setAutoCommit(autocommitBefore);
                if (!connection.isClosed()) {
                    log.debug("close connection! autocommit = {}", connection.getAutoCommit());
                    connection.close();
                }
            }
        }
    }
}
